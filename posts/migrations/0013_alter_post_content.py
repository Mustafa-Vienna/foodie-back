# Generated by Django 5.1.5 on 2025-03-21 01:49

from django.db import migrations, models
import json

def pre_migrate_content_to_json(apps, schema_editor):
    Post = apps.get_model('posts', 'Post')
    for post in Post.objects.all():
        # Convert the old TextField content into a JSON-compatible structure
        # and save it as a JSON string in the database
        new_content = {
            "introduction": post.content if post.content else "",
            "ingredients": [],
            "steps": [],
            "conclusion": ""
        }
        # Update the content field with the JSON string
        Post.objects.filter(id=post.id).update(content=json.dumps(new_content))

def reverse_pre_migrate_content(apps, schema_editor):
    Post = apps.get_model('posts', 'Post')
    for post in Post.objects.all():
        # Revert to TextField by extracting the introduction
        try:
            content_dict = json.loads(post.content) if post.content else {}
            old_content = content_dict.get("introduction", "")
        except json.JSONDecodeError:
            old_content = post.content  # Fallback in case of invalid JSON
        Post.objects.filter(id=post.id).update(content=old_content)

def migrate_content_to_json(apps, schema_editor):
    # This function can now be simpler since the data is already in JSON format
    Post = apps.get_model('posts', 'Post')
    for post in Post.objects.all():
        # Ensure the content field is a dict (not a string)
        if isinstance(post.content, str):
            post.content = json.loads(post.content)
        post.save()

def reverse_migrate_content(apps, schema_editor):
    Post = apps.get_model('posts', 'Post')
    for post in Post.objects.all():
        # Revert to JSON string for rollback
        if isinstance(post.content, dict):
            post.content = json.dumps(post.content)
        post.save()

class Migration(migrations.Migration):

    dependencies = [
        ('posts', '0012_alter_tag_name'),
    ]

    operations = [
        # Step 1: Convert the existing TextField data to a JSON string
        migrations.RunPython(pre_migrate_content_to_json, reverse_pre_migrate_content),
        # Step 2: Alter the field to JSONField (data should now be valid JSON)
        migrations.AlterField(
            model_name='Post',
            name='content',
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text='Content should be a JSON object with keys: introduction, ingredients, steps, conclusion'
            ),
        ),
        # Step 3: Ensure the content field is a dict (not a string) in the model
        migrations.RunPython(migrate_content_to_json, reverse_migrate_content),
    ]